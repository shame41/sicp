#lang racket
(require sicp)
(define-syntax cons-stream
	(syntax-rules ()
				  ((cons-stream a b)
					(cons a (delay b)))))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))
(define (integers-starting-from n)
		(cons-stream n (integers-starting-from (+ n 1))))
(define integers (integers-starting-from 1))
(define (divisible? x y) (= (remainder x y) 0))
(define (stream-filter pred stream)
		(cond ((null? stream) '())
			  ((pred (stream-car stream))
			   (cons-stream (stream-car stream)
							(stream-filter pred
										   (stream-cdr stream))))
			  (else (stream-filter pred (stream-cdr stream)))))
(define no-sevens
		(stream-filter (lambda (x) (not (divisible? x 7)))
					   integers))
(define (stream-enumerate-interval low high)
		(if (> low high)
			`()
			(cons-stream
			  low
			  (stream-enumerate-interval (+ low 1) high))))
(define (stream-ref s n)
		(if (= n 0)
			(stream-car s)
			(stream-ref (stream-cdr s) (- n 1))))
;(define (stream-map proc s)
;		(if (null? s)
;			`()
;			(cons-stream (proc (stream-car s))
;						 (stream-map proc (stream-cdr s)))))
(define (stream-map proc . argstreams)
		(if (null? (car argstreams))
			'()
			(cons-stream
			  (apply proc (map stream-car argstreams))
			  (apply stream-map 
					 (cons proc (map stream-cdr argstreams))))))
(define (stream-for-each proc s)
		(if (null? s)
			`done
			(begin (proc (stream-car s))
				   (stream-for-each proc (stream-cdr s)))))
(define (display-stream s)
		(stream-for-each display-line s))
(define (display-line x)
		(newline)
		(display x))
(define (mul-stream a b)
		(stream-map * a b))
(define factorials (cons-stream 1 (mul-stream integers factorials)))
(define (partial-sums s)
		(cons-stream
		  (stream-car s)
		  (stream-map (lambda (x) (+ x (stream-car s)))
					  (partial-sums (stream-cdr s)))))
(define (expand num den radix)
		(cons-stream 
		  (quotient (* num radix) den)
		  (expand (remainder (* num radix)
							 den)
				  den
				  radix)))
(define ones
	(cons-stream 1 ones))
(define (integrate-series s)
		  (stream-map * (stream-map / ones integers) s))
(define (add-streams s1 s2)
		(stream-map + s1 s2))
