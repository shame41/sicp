#lang racket
(require sicp)
(define (logical-not s)
		(cond ((= s 0) 1)
			  ((= s 1) 0)
			  (else (error "not a signal"))))
(define (inverter input output)
		(define (invert-input)
				(let ((new-value (logical-not (get-signal input))))
					 (after-delay inverter-delay
								  (lambda ()
									(set-signal! output new-value)))))
		(add-action! input invert-input)
		`ok)
(define (and-gate a1 a2 output)
		(define (and-action-procedure)
		  (let ((new-value
						(logical-and (get-signal a1) 
									 (get-signal a2))))
			   (after-delay and-gate-delay
							(lambda ()
							  (set-signal! output new-value)))))
		(add-action! a1 and-action-procedure)
		(add-action! a2 and-action-procedure)
		`ok)
(define (logical-and a b)
		(cond ((and (= 1 a) (= 1 b)) 1)
			  ((or (and (= 1 a) (= 0 b))
				   (and (= 0 a) (= 1 b))
				   (and (= 0 a) (= 0 b)))
			   0)
			  (else (error "not a signal"))))
(define (or-gate a1 a2 output)
		(define (or-action-procedure)
		  (let ((new-value
						(logical-or (get-signal a1) 
									 (get-signal a2))))
			   (after-delay or-gate-delay
							(lambda ()
							  (set-signal! output new-value)))))
		(add-action! a1 or-action-procedure)
		(add-action! a2 or-action-procedure)
		`ok)
(define (logical-or a b)
		(cond ((or (= 1 a) (= 1 b)) 1)
			  ((and (= 0 a) (= 0 b)) 0)
			  (else (error "not a signal"))))
(define (make-wire)
		(let ((signal-value 0) (action-procedure `()))
			 (define (set-my-signal! new-value)
					 (if (not (= signal-value new-value))
						 (begin
						   (set! signal-value new-value)
						   (call-each action-procedure))
						 `done))
			 (define (accept-action-procedure! proc)
					 (set! action-procedure (cons proc action-procedure))
					 (proc))
			 (define (dispatch m)
					 (cond ((eq? m `get-signal) signal-value)
						   ((eq? m `set-signal!) set-my-signal!)
						   ((eq? m `add-action!) accept-action-procedure!)
						   (else (error "unknown operation"))))
			 dispatch))
(define (call-each procedures)
		(if (null? procedures)
			`done
			(begin
			  ((car procedures))
			  (call-each (cdr procedures)))))
(define (after-delay delay action)
		(add-to-agenda! (+ delay (current-time the-agenda))
						action
						the-agenda))
(define (propagate)
		(if (empty-aganda? the-agenda)
			`done
			(let ((first-item (first-agenda-iter the-agenda)))
				 (first-item)
				 (remove-first-agenda-item! the-agenda)
				 (propagate))))
